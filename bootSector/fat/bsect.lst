Microsoft (R) Macro Assembler Version 6.11		    06/13/16 12:17:44
bsect.asm						     Page 1 - 1


				;
				; Copyright (c) Microsoft Corporation.  All rights reserved.
				;
				;
				; Use of this sample source code is subject to the terms of the Microsoft
				; license agreement under which you licensed this sample source code. If
				; you did not accept the terms of the license agreement, you are not
				; authorized to use this sample source code. For the terms of the license,
				; please see the license agreement between you and Microsoft or, if applicable,
				; see the LICENSE.RTF on your install media or the root of your tools installation.
				; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
				;
				;        
				;-------------------------------------------------------------------------------

				        .model tiny
 0000				        .code
				        .stack
				        .startup
				        .386

 = 1000				LOAD_ADDRESS    EQU     1000H       ; Boot loader load address
 = 0044				READ_LENGTH     EQU     68          ; Size of boot loader image in sectors.

				;-------------------------------------------------------------------------------

				OpPrefix MACRO
				        db      66h
				        ENDM

				AddrPrefix MACRO
				        db      67h
				        ENDM

				;-------------------------------------------------------------------------------
				;
				; Even though we declare 0xFA00 as a starting address, the BIOS will
				; load us at 0x7C00. But just at the beginning of our code, we'll 
				; copy ourselves to 0xFA00 and jump in the right place.
				;
				; This file contains the boot sector code for the Windows CE BIOS Boot Loader.
				; A quick overview of the boot process:
				;
				; * At power-on, the BIOS performs POST.
				; * The BIOS seeks out the boot disk and on a fixed disk, loads the first
				;   sector(the master boot record - MBR) and jumps to it (the MBR contains
				;   code and data). Note that for a floppy, the first sector on the disk is
				;   the boot sector (no MBR).
				; * The MBR code, amongst other things, locates the active boot partition
				;   and loads the boot sector code (this code).
				; * The boot sector code is the first filesystem-specific bit of code and
				;   it's job is to locate, load, and bootstrap the OS (or in our case,
				;   the boot loader).
				;
				;
				        org     0FA00h

 FA00  EB 3C			        jmp     Start
 FA02  90			        nop

				;
				; BIOS parameter block (BPB)
				; 
				; This structure is filled when volume is formated for FAT file system.
				; There is multiple BPB formats (one for FAT12 and FAT16, second for FAT32
				; and another for exFat). This is also reason why we have different boot
				; sector code for each FAT flavor.
				; 
				                                    ;       Offset  Size
				                                    ;       0       3
 FA03 20 20 20 20 20 20		VerId           db  '        '      ; 7C03  3       8
       20 20
 FA0B 0000			BytePerSect     dw  0000            ; 7C0B  11      2
 FA0D 00			SectPerClust    db  00              ; 7C0D  13      1
 FA0E 0000			RsvdSects       dw  0000            ; 7C0E  14      2
 FA10 00			NumFATs         db  00              ; 7C10  16      1
 FA11 0000			Num32bEntry     dw  0000            ; 7C11  17      2
 FA13 0000			SectPerPart     dw  0000            ; 7C13  19      2
 FA15 00			MediaDesc       db  00              ; 7C15  21      1
 FA16 0000			SectPerFAT      dw  0000            ; 7C16  22      2
 FA18 0000			SectPerTrack    dw  0000            ; 7C18  24      2
 FA1A 0000			NumHeads        dw  0000            ; 7C1A  26      2
 FA1C 0000			NumHiddenSectL  dw  0000            ; 7C1C  28      2
 FA1E 0000			NumHiddenSectH  dw  0000            ; 7C1E  30      2
 FA20 0000			TotalSectorsL   dw  0000            ; 7C20  32      2
 FA22 0000			TotalSectorsH   dw  0000            ; 7C22  34      2
 FA24 00			DriveId         db  00              ; 7C24  36      1
 FA25 00			TempVal         db  00              ; 7C25  37      1
 FA26 00			ExtRecordSig    db  00              ; 7C26  38      1
 FA27 0000			VolSerNumL      dw  0000            ; 7C27  39      2
 FA29 0000			VolSerNumH      dw  0000            ; 7C29  41      2
 FA2B 20 20 20 20 20 20		VolLabel        db  '           '   ; 7C2B  43      11
       20 20 20 20 20
 FA36 20 20 20 20 20 20		TypeFAT         db  '        '      ; 7C36  54      8
       20 20
				; Diskette Parameter Table          ; 7C3E  62      11
				; Int13Ext      db  00              ; 7C49  73      1
				; DataSectL     dw  0000            ; 7C4A  74      2
				; DataSectH     dw  0000            ; 7C4C  76      2
				;                                   ; 7C4E  78

				;-------------------------------------------------------------------------------
				;
				; Start of boot sector code
				;
 FA3E				Start:
				        
 FA3E  33 C9			        xor     cx, cx              
 FA40  8E D1			        mov     ss, cx                      ; Zero stack segment
 FA42  BC FA00			        mov     sp, 0FA00h                  ; Stack Pointer to 0xFA00
 FA45  8E C1			        mov     es, cx                      ; Zero extra segment
 FA47  8E D9			        mov     ds, cx                      ; Zero data segment

 FA49  8B EC			        mov     bp, sp                      ; Set base register to 0xFA00

 FA4B  BE 7C00			        mov     si, 7C00h                   ; Copy code from 0x7C00 to 0xFA00
 FA4E  8B FC			        mov     di, sp
 FA50  B9 0200			        mov     cx, 0200h
 FA53  FC			        cld
 FA54  F3/ A4			        repz    movsb

 FA56  E9			        db      00E9H                       ; Make a relative jump
 FA57  7E00			        dw      (0FA00h - 7C00h)

 FA59  88 4E 49			        mov     [bp + 73], cl               ; Clear Int13Ext flag

 FA5C  BB 0078			        mov     bx, 4 * 1Eh                 ; Update diskette parameter table
 FA5F  C5 37			        lds     si, dword ptr [bx]
 FA61  1E			        push    ds
 FA62  56			        push    si
 FA63  16			        push    ss
 FA64  55			        push    bp
 FA65  BF FA3E			        mov     di, 0FA3Eh                  ; Diskette Parameter Table
 FA68  89 3F			        mov     [bx], di
 FA6A  89 4F 02			        mov     [bx + 2], cx
 FA6D  B1 0B			        mov     cl, 11
 FA6F  FC			        cld
 FA70  F3/ A4			        repz    movsb
 FA72  06			        push    es
 FA73  1F			        pop     ds
				        
 FA74  C6 45 FE 0F		        mov     byte ptr [di - 2], 0Fh      ; Timeout 15 ms
 FA78  8B 46 18			        mov     ax, [bp + 24]               ; SectPerTrack
 FA7B  88 45 F9			        mov     [di - 7], al                ; Update sectors per track

 FA7E  8A 56 24			        mov     dl, [bp + 36]               ; DriveId
 FA81  80 FA 80			        cmp     dl, 80h
 FA84  72 42			        jb      NoFixedDisk

 FA86  C7 46 4E 0041		mov [bp + 78], 'A'
 FA8B  E8 0145			call PrtChk


 FA8E  B4 41			        mov     ah, 41h                     ; Check for DDS extension
 FA90  BB 55AA			        mov     bx, 55AAh
 FA93  CD 13			        int     13h
 FA95  72 10			        jc      NoInt13Ext

 FA97  81 FB AA55		        cmp     bx, 0AA55h
 FA9B  75 0A			        jnz     NoInt13Ext

 FA9D  F6 C1 01			        test    cl, 01h
 FAA0  75 05			        jnz     NoInt13Ext


 FAA2  88 4E 49			        mov     [bp + 73], cl               ; Set Int13Ext flag
 FAA5  EB 21			        jmp     NoFixedDisk

 FAA7				NoInt13Ext:        

 FAA7  C7 46 4E 0042		mov [bp + 78], 'B'
 FAAC  E8 0124			call PrtChk

 FAAF  8A 56 24			        mov     dl, [bp + 36]               ; DriveId
 FAB2  B4 08			        mov     ah, 08h
 FAB4  CD 13			        int     13h
 FAB6  0F 82 0083		        jc      DiskError

 FABA  86 F2			        xchg    dh, dl
 FABC  32 F6			        xor     dh, dh
 FABE  42			        inc     dx
 FABF  89 56 1A			        mov     [bp + 26], dx               ; NumHeads
 FAC2  83 E1 3F			        and     cx, 003Fh
 FAC5  89 4E 18			        mov     [bp + 24], cx               ; SectPerTrack

 FAC8				NoFixedDisk:

 FAC8  C7 46 4E 0043		mov [bp + 78], 'C'
 FACD  E8 0103			call PrtChk

 FAD0  32 E4			        xor     ah, ah
 FAD2  8A 46 10			        mov     al, [bp + 16]               ; NumFATs
 FAD5  F7 66 16			        mul     word ptr [bp + 22]          ; SectPerFAT
 FAD8  03 46 1C			        add     ax, [bp + 28]               ; NumHiddenSectL
 FADB  13 56 1E			        adc     dx, [bp + 30]               ; NumHiddenSectH
 FADE  03 46 0E			        add     ax, [bp + 14]               ; RsvdSects
 FAE1  83 D2 00			        adc     dx, 0
 FAE4  89 46 4A			        mov     [bp + 74], ax               ; DataSectL
 FAE7  89 56 4C			        mov     [bp + 76], dx               ; DataSectH
 FAEA  50			        push    ax                          ; Save root dir LBA 
 FAEB  52			        push    dx
				    
 FAEC  B8 0020			        mov     ax, 0020h
 FAEF  F7 66 11			        mul     word ptr [bp + 17]          ; Num32bEntry
 FAF2  8B 5E 0B			        mov     bx, [bp + 11]               ; BytePerSect
 FAF5  03 C3			        add     ax, bx
 FAF7  48			        dec     ax
 FAF8  F7 F3			        div     bx
 FAFA  01 46 4A			        add     [bp + 74], ax               ; DataSectL
 FAFD  83 56 4C 00		        adc     [bp + 76], 0                ; DataSectH

 FB01  BB 0500			        mov     bx, 0500h                   ; Sector Buffer
 FB04  5A			        pop     dx                          ; RootDirSectH
 FB05  58			        pop     ax                          ; RootDirSectL
 FB06  B9 0001			        mov     cx, 1
 FB09  E8 007E			        call    ReadSectors
 FB0C  72 2F			        jc      DiskError

 FB0E  C7 46 4E 0064		mov [bp + 78], 'd'
 FB13  E8 00BD			call PrtChk


 FB16  BB 0500			        mov     bx, 0500h                   ; Sector Buffer

 FB19  8B 46 0B			        mov     ax, [bp + 11]               ; BytePerSect
 FB1C  B1 05			        mov     cl, 05h
 FB1E  D3 E8			        shr     ax, cl
 FB20  8B C8			        mov     cx, ax                      ; Number of entries in sector
				    
 FB22				FindEntry:
 FB22  51			        push    cx
 FB23  8B FB			        mov     di, bx
 FB25  B9 000B			        mov     cx, 000Bh
 FB28  BE FBE1 R		        mov     si, offset ImageName
 FB2B  F3/ A6			        repz    cmpsb
 FB2D  74 22			        jz      FoundFiles                  ; Found it?

 FB2F  C7 46 4E 0065		mov [bp + 78], 'e'
 FB34  E8 009C			call PrtChk

 FB37  83 C3 20			        add     bx, 0020h                   ; Move to the next entry
 FB3A  59			        pop     cx
 FB3B  E2 E5			        loop    FindEntry

				        ; A disk error has occurred - usually this is because
				        ; we couldn't find the boot loader file on the disk.  
				        ;
 FB3D				DiskError:
 FB3D  BE FBEC R		        mov     si, offset ErrorMsg
 FB40  E8 0038			        call    PrintMessage
 FB43  33 C0			        xor     ax, ax
 FB45  CD 16			        int     16h
 FB47  5D			        pop     bp                          ; Restore diskette parameter table
 FB48  1F			        pop     ds
 FB49  8F 46 00			        pop     [bp]
 FB4C  8F 46 02			        pop     [bp + 2]
 FB4F  CD 19			        int     19h

				;
				; We found our bootloader on the disk - now we need to load it.
				; There are a couple of important things here:
				;
				; * The boot loader image must be in a contiguous grouping of sectors
				;   on the disk.  This is because the bootloader doesn't contain
				;   code to load the rest of itself, like DOS's IO.SYS does.
				;   This requirement imposes a retriction which must be addressed
				;   by the utility that writes the bootloader image to disk.
				;   On a newly-formatted disk, empty disk, the main problem would
				;   come from bad disk sectors.
				;
				; * The boot sector loads the bootloader at a predetermined address
				;   (0x1000h). This location is compatible with the XLDR configuration
				;   in xldr.bib.  As well, it allows for the BIOS interrupt vector
				;   table to remain unaffected.
				;
				; * When the XLDR image is loaded, the boot sector code loads
				;   a predetermined number of sectors from the storage device.
				;   The number of sectors to be loaded must be set at build time
				;   and if the XLDR image size changes, this number will need to be
				;   updated (READ_LENGTH above).
				        
 FB51				FoundFiles:

 FB51  C7 46 4E 006D		mov [bp + 78], 'm'
 FB56  E8 007A			call PrtChk

 FB59  8B 47 1A			        mov     ax, [bx + 1Ah]              ; Cluster
 FB5C  48			        dec     ax
 FB5D  48			        dec     ax
 FB5E  8A 5E 0D			        mov     bl, [bp + 13]               ; SectPerClust
 FB61  32 FF			        xor     bh, bh
 FB63  F7 E3			        mul     bx
 FB65  03 46 4A			        add     ax, [bp + 74]               ; DataSectL
 FB68  13 56 4C			        adc     dx, [bp + 76]               ; DataSectH
 FB6B  BB 1000			        mov     bx, LOAD_ADDRESS            ; Load to 0000:1000
 FB6E  B9 0044			        mov     cx, READ_LENGTH             ; This number of sectors
 FB71  E8 0016			        call    ReadSectors
 FB74  72 C7			        JB      DiskError
				    
				        ; Jump to the bootloader image.
 FB76  EA			        DB      00EAh
 FB77  1000			        DW      LOAD_ADDRESS
 FB79  0000			        DW      0000h

				        ;
				        ; Display a text message using the BIOS INT 10h call.
				        ;
 FB7B				PrintMessage:
 FB7B  AC			        lodsb
 FB7C  0A C0			        or      al, al
 FB7E  74 09			        jz      Return
 FB80  B4 0E			        mov     ah, 0Eh
 FB82  BB 0007			        mov     bx, 0007h
 FB85  CD 10			        int     10h
 FB87  EB F2			        jmp     PrintMessage

 FB89				Return:
 FB89  C3			        RET

				;-------------------------------------------------------------------------------
				;
				; Read disk sector(s).
				;
				;   Inputs:  DX:AX == logical sector #
				;            CL == # sectors (CH == 0)
				;            ES:BX == transfer address
				;            BP == boot sector code
				;
				;   Outputs: DX:AX next logical sector #
				;            CX == 0 (assuming no errors)
				;            ES:BX -> byte after last byte of read
				;            Carry set if error, else clear if success
				;
				;   Preserves: BP, SI, DI
				;
 FB8A				ReadSectors:

 FB8A  60			        pusha                           ; save all registers
				        
				        OpPrefix                        ; push packet on stack
 FB8B  66		     1	        db      66h
 FB8C  6A 00			        push    0
 FB8E  52			        push    dx
 FB8F  50			        push    ax                      ; block number
 FB90  06			        push    es
 FB91  53			        push    bx                      ; transfer address
 FB92  6A 01			        push    1                       ; count of one, because we're looping
 FB94  6A 10			        push    16                      ; packet size
				        
 FB96  91			        xchg    ax, cx                  ; AX <-> CX
				        
 FB97  8B 46 18			        mov     ax, [bp + 24]           ; Sectors per track
 FB9A  96			        xchg    ax, si                  ; save for divides
				        
 FB9B  92			        xchg    ax, dx                  ; DX -> AX
 FB9C  33 D2			        xor     dx, dx                  ; divide 0:AX
 FB9E  F7 F6			        div     si                      ; AX = high word of track
				        
 FBA0  91			        xchg    ax, cx                  ; save AX in CX and restore old AX
 FBA1  F7 F6			        div     si                      ; CX:AX = track, DX = sector
				        
 FBA3  42			        inc     dx                      ; sector is 1-based
 FBA4  87 CA			        xchg    cx, dx                  ; CX = sector, DX = high word of track
 FBA6  F7 76 1A			        div     word ptr [bp + 26]      ; heads -> AX = cylinder, DX = head
				        
 FBA9  8A F2			        mov     dh, dl                  ; head # < 255
				        
 FBAB  8A E8			        mov     ch, al                  ; CH = cyl #
 FBAD  C0 CC 02			        ror     ah, 2                   ; move bits 8,9 of AX to bits 14,15
				                                        ; (the rest has to be zero, since
				                                        ;  cyls cannot be more than 10 bits)
 FBB0  0A CC			        or      cl, ah                  ; CL = sector # plus high bits of cyl #
 FBB2  B8 0201			        mov     ax, 0201h               ; disk read 1 sector

 FBB5  80 7E 49 00		        cmp     byte ptr [bp + 73], 0    ; should standard call be used?
 FBB9  74 04			        je      DoIo                    ; use standard calls
 FBBB  B4 42			        mov     ah, 42h                 ; x13, we're ready to rock
 FBBD  8B F4			        mov     si,sp                   ; DS:SI -> X13 packet

 FBBF				DoIo:
 FBBF  8A 56 24			        mov     dl, [bp + 36]           ; DL == drive #
 FBC2  CD 13			        int     13h
				        
 FBC4  61			        popa                            ; throw away packet on stack (8 words)
 FBC5  61			        popa                            ; get real registers back
 FBC6  72 0A			        jc      DoReadExit              ; disk error
				        
 FBC8  40			        inc     ax
 FBC9  75 01			        jnz     DoReadNext
 FBCB  42			        inc     dx
				        
 FBCC				DoReadNext:                             ; Adjust buffer address
 FBCC  03 5E 0B			        add     bx, [bp + 11]           ; BytesPerSector
 FBCF  49			        dec     cx
 FBD0  75 B8			        jnz     ReadSectors
				        
 FBD2				DoReadExit:
 FBD2  C3			        ret

				;PrintAX:
				;		pusha
				;		XOR      BX, BX
				;		MOV      CL, 4
				;StartPrinting:
				;	    PUSH     AX
				;	    CMP      BX, 1
				;	    JG       DoneExchange
				;	    MOV      AL, AH
				;DoneExchange:
				;	    TEST     Bl, 1
				;	    JNE      ConvertNumber
				;	    SHR      AL, CL
				;ConvertNumber:
				;		AND      AL, 0FH
				;		ADD      AL, 030H
				;		CMP      AL, 03AH
				;		JB       PrintNum
				;		ADD      AL, 07H
				;PrintNum:
				;		MOV      AH, 0EH
				;		INT      10H
				;		POP      AX
				;		INC      BX
				;		CMP      BX, 4
				;		JB       StartPrinting
				;	    mov     si, offset NewLine
				 ;       call    PrintMessage
				  ;      popa
				;		ret

 FBD3				PrtChk:
 FBD3  60					pusha
 FBD4  8B 46 4E					mov		ax, [bp + 78]
 FBD7  BE FBF7 R				mov		si, offset ChkPtr
 FBDA  88 04					mov		[si],al
 FBDC  E8 FF9C					call	PrintMessage
 FBDF  61					popa
 FBE0  C3					ret
				        
				;-------------------------------------------------------------------------------

 FBE1				ImageName:
 FBE1  57 43 45 4C 44 52	        db      'WCELDR     '
       20 20 20 20 20
				        
 FBEC				ErrorMsg:
 FBEC  0D 0A 42 61 64 20	        db      0Dh, 0Ah, 'Bad Disk ' 
       44 69 73 6B 20
 FBF7				ChkPtr:
 FBF7  00					db	0
 FBF8				NewLine:        
 FBF8  0D 0A 00			        db	0Dh, 0Ah, 0
				        
 FBFB				Padding:
				;        db      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				;        db      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				;        db      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 FBFB  00 00 00				     db      0,0,0
				        
 FBFE				Signature:
 FBFE  55 AA			        db      55h, 0AAh

				;-------------------------------------------------------------------------------

				        .exit

				        END
Microsoft (R) Macro Assembler Version 6.11		    06/13/16 12:17:44
bsect.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

AddrPrefix . . . . . . . . . . .	Proc
OpPrefix . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 FC04	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@Startup . . . . . . . . . . . .	L Near	 0100	  _TEXT	
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BytePerSect  . . . . . . . . . .	Word	 FA0B	  _TEXT	
ChkPtr . . . . . . . . . . . . .	L Near	 FBF7	  _TEXT	
DiskError  . . . . . . . . . . .	L Near	 FB3D	  _TEXT	
DoIo . . . . . . . . . . . . . .	L Near	 FBBF	  _TEXT	
DoReadExit . . . . . . . . . . .	L Near	 FBD2	  _TEXT	
DoReadNext . . . . . . . . . . .	L Near	 FBCC	  _TEXT	
DriveId  . . . . . . . . . . . .	Byte	 FA24	  _TEXT	
ErrorMsg . . . . . . . . . . . .	L Near	 FBEC	  _TEXT	
ExtRecordSig . . . . . . . . . .	Byte	 FA26	  _TEXT	
FindEntry  . . . . . . . . . . .	L Near	 FB22	  _TEXT	
FoundFiles . . . . . . . . . . .	L Near	 FB51	  _TEXT	
ImageName  . . . . . . . . . . .	L Near	 FBE1	  _TEXT	
LOAD_ADDRESS . . . . . . . . . .	Number	 1000h	 
MediaDesc  . . . . . . . . . . .	Byte	 FA15	  _TEXT	
NewLine  . . . . . . . . . . . .	L Near	 FBF8	  _TEXT	
NoFixedDisk  . . . . . . . . . .	L Near	 FAC8	  _TEXT	
NoInt13Ext . . . . . . . . . . .	L Near	 FAA7	  _TEXT	
Num32bEntry  . . . . . . . . . .	Word	 FA11	  _TEXT	
NumFATs  . . . . . . . . . . . .	Byte	 FA10	  _TEXT	
NumHeads . . . . . . . . . . . .	Word	 FA1A	  _TEXT	
NumHiddenSectH . . . . . . . . .	Word	 FA1E	  _TEXT	
NumHiddenSectL . . . . . . . . .	Word	 FA1C	  _TEXT	
Padding  . . . . . . . . . . . .	L Near	 FBFB	  _TEXT	
PrintMessage . . . . . . . . . .	L Near	 FB7B	  _TEXT	
PrtChk . . . . . . . . . . . . .	L Near	 FBD3	  _TEXT	
READ_LENGTH  . . . . . . . . . .	Number	 0044h	 
ReadSectors  . . . . . . . . . .	L Near	 FB8A	  _TEXT	
Return . . . . . . . . . . . . .	L Near	 FB89	  _TEXT	
RsvdSects  . . . . . . . . . . .	Word	 FA0E	  _TEXT	
SectPerClust . . . . . . . . . .	Byte	 FA0D	  _TEXT	
SectPerFAT . . . . . . . . . . .	Word	 FA16	  _TEXT	
SectPerPart  . . . . . . . . . .	Word	 FA13	  _TEXT	
SectPerTrack . . . . . . . . . .	Word	 FA18	  _TEXT	
Signature  . . . . . . . . . . .	L Near	 FBFE	  _TEXT	
Start  . . . . . . . . . . . . .	L Near	 FA3E	  _TEXT	
TempVal  . . . . . . . . . . . .	Byte	 FA25	  _TEXT	
TotalSectorsH  . . . . . . . . .	Word	 FA22	  _TEXT	
TotalSectorsL  . . . . . . . . .	Word	 FA20	  _TEXT	
TypeFAT  . . . . . . . . . . . .	Byte	 FA36	  _TEXT	
VerId  . . . . . . . . . . . . .	Byte	 FA03	  _TEXT	
VolLabel . . . . . . . . . . . .	Byte	 FA2B	  _TEXT	
VolSerNumH . . . . . . . . . . .	Word	 FA29	  _TEXT	
VolSerNumL . . . . . . . . . . .	Word	 FA27	  _TEXT	

	   0 Warnings
	   0 Errors
